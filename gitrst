#!/bin/bash

showlog=0

function ShowHelp()
{

echo  "Usage: ${0##*/} [-hl] [PATH] 
Show git status of PATH or (when no PATH) the current directory.

	-h	display this help and exit
	-l	display log instead of status
"


}

#PRINT GIT STATUS
function GitStatus()
{
	echo $(pwd)
	
	#PRINT UPTODATE
	output=$(git status | head -n 2 | tail -n 1)	

	if [[ "$output" == "Your branch is up-to-date"* ]]
	then
		echo -ne 	"\e[1;32m\t"
		echo  		$output	
		echo -ne 	"\e[0m"	
	else
		if [[ "$output" != "" ]]
		then
			echo -ne 	"\e[1;34m\t"
			echo  		$output	
			echo -ne 	"\e[0m"	
		else
			echo -ne 	"\e[1;31m\t"
			echo  		"Your branch/origin is not up-to-date!"
			echo -ne 	"\e[0m"
		fi

	fi


	#PRINT MODIFIER STATUS
	echo -ne 	"\e[1;34m"

	declare -A mod_stats
	mod_stats=( 	["M"]="File(s) Changed"
		 	["A"]="File(s) Added"
			["D"]="File(s) Deleted"
			["R"]="File(s) Renamed"
			["C"]="File(s) Copied"
			["U"]="Unmerged File(s)" 
			["\?"]="Untracked File(s)"
			["\!"]="Ignored File(s)!" ) #SEE git status --help

	for i in "${!mod_stats[@]}"
	do
		output=$(git status -s  | cut -c-2 | grep -c "$i")
		if [[ $output != 0 ]]
		then
			echo -e "\t$output ${mod_stats["$i"]}"
		fi
	done
	echo -ne "\e[0m"
	echo ""
}

function GitLog()
{
	#output=$(git log | head -n 6 | tail -n 4)
	echo $(pwd)
	echo -ne "\e[2;33m\t"
	echo -e "    $(git log | head -n 3 | tail -n 1)"
	echo -ne "\e[0m"
	echo -ne "\e[2;39m\t"
	echo -e "$(git log | head -n 6 | tail -n 2)"
	echo -ne "\e[0m"	
}


#LOOP THROUGH FOLDERS IN CURRENT MAP
function loopFolders()
{
	rootPath=$(pwd)
	#FIND AND LOOP THROUGH GIT DIRECTORIES
	for i in $(find . -name ".git" 2> /dev/null)
	do
		if [ -d $i ]
		then
			cd $i	
			cd ..
			echo $(git remote update)
			if [ $showlog == 1 ]; then
				GitLog
			else
				GitStatus						
			fi
			cd $rootPath
		fi
	done
}


# HANDLE ARGUMENTS
OPTIND=1 # Reset is necessary if getopts was used previously in the script.  It is a good idea to make this local in a function.
while getopts "hl" opt; do
	case "$opt" in
        	h)
             		ShowHelp
             		exit 0
             		;;
         	l)  	
			showlog=1
             		;;
   		'?')
		        ShowHelp >&2
             		exit 1
             		;;
	esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.


currentPath=$(pwd)

#check if last argument is a folder
path="${BASH_ARGV[0]}"

if [[ -d $path ]]; then
	cd $path
fi

#do the magic
loopFolders ./

cd $currentPath


